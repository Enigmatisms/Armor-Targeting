// Generated by gencpp from file serial_com/parameters.msg
// DO NOT EDIT!


#ifndef SERIAL_COM_MESSAGE_PARAMETERS_H
#define SERIAL_COM_MESSAGE_PARAMETERS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serial_com
{
template <class ContainerAllocator>
struct parameters_
{
  typedef parameters_<ContainerAllocator> Type;

  parameters_()
    : pitch(0.0)
    , yaw(0.0)
    , v1(0.0)
    , v2(0.0)
    , v3(0.0)  
    , status(0) {
    }
  parameters_(const ContainerAllocator& _alloc)
    : pitch(0.0)
    , yaw(0.0)
    , v1(0.0)
    , v2(0.0)
    , v3(0.0)  
    , status(0) {
  (void)_alloc;
    }



   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _v1_type;
  _v1_type v1;

   typedef float _v2_type;
  _v2_type v2;

   typedef float _v3_type;
  _v3_type v3;

   typedef uint8_t _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::serial_com::parameters_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_com::parameters_<ContainerAllocator> const> ConstPtr;

}; // struct parameters_

typedef ::serial_com::parameters_<std::allocator<void> > parameters;

typedef boost::shared_ptr< ::serial_com::parameters > parametersPtr;
typedef boost::shared_ptr< ::serial_com::parameters const> parametersConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial_com::parameters_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial_com::parameters_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace serial_com

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'serial_com': ['/home/sentinel/ROSWorkspace/cvProject/src/serial_com/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::serial_com::parameters_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_com::parameters_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_com::parameters_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_com::parameters_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_com::parameters_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_com::parameters_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial_com::parameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "65b7ed83d46d44925e851fc769bc6411";
  }

  static const char* value(const ::serial_com::parameters_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x65b7ed83d46d4492ULL;
  static const uint64_t static_value2 = 0x5e851fc769bc6411ULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_com::parameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial_com/parameters";
  }

  static const char* value(const ::serial_com::parameters_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial_com::parameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 pitch\n\
float32 yaw\n\
float32 v1\n\
float32 v2\n\
float32 v3\n\
uint8 status \n\
";
  }

  static const char* value(const ::serial_com::parameters_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial_com::parameters_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.v1);
      stream.next(m.v2);
      stream.next(m.v3);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct parameters_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_com::parameters_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_com::parameters_<ContainerAllocator>& v)
  {
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "v1: ";
    Printer<float>::stream(s, indent + "  ", v.v1);
    s << indent << "v2: ";
    Printer<float>::stream(s, indent + "  ", v.v2);
    s << indent << "v3: ";
    Printer<float>::stream(s, indent + "  ", v.v3);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_COM_MESSAGE_PARAMETERS_H
