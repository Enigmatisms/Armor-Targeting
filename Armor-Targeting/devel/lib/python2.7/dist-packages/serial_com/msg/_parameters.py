# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from serial_com/parameters.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class parameters(genpy.Message):
  _md5sum = "b597e20a84aedc1861374aeb02f3e1b6"
  _type = "serial_com/parameters"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 pitch
float32 yaw
float32 v1
float32 v2
float32 v3
uint8 status"""
  __slots__ = ['pitch','yaw','v1','v2','v3','status']
  _slot_types = ['float32','float32','float32','float32','float32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pitch,yaw,v1,v2,v3,status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(parameters, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.v1 is None:
        self.v1 = 0.
      if self.v2 is None:
        self.v2 = 0.
      if self.v3 is None:
        self.v3 = 0.
      if self.status is None:
        self.status = 0
    else:
      self.pitch = 0.
      self.yaw = 0.
      self.v1 = 0.
      self.v2 = 0.
      self.v3 = 0.
      self.status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5fB().pack(_x.pitch, _x.yaw, _x.v1, _x.v2, _x.v3, _x.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.pitch, _x.yaw, _x.v1, _x.v2, _x.v3, _x.status,) = _get_struct_5fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5fB().pack(_x.pitch, _x.yaw, _x.v1, _x.v2, _x.v3, _x.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.pitch, _x.yaw, _x.v1, _x.v2, _x.v3, _x.status,) = _get_struct_5fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5fB = None
def _get_struct_5fB():
    global _struct_5fB
    if _struct_5fB is None:
        _struct_5fB = struct.Struct("<5fB")
    return _struct_5fB
